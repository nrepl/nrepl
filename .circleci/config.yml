version: 2.1

######################################################################
#
# Start of general purpose config. These can plausibly go into orbs
#
######################################################################

# Default settings for executors

orbs:
  win: circleci/windows@5.0.0

defaults: &defaults
  working_directory: ~/repo
  environment:
    LEIN_ROOT: "true"   # we intended to run lein as root
    JVM_OPTS: -Xmx3200m # limit the maximum heap size to prevent out of memory errors
  resource_class: large # default is medium. large (may) give us more consistent CI results

# Runners for OpenJDK

executors:
  openjdk8:
    docker:
      - image: clojure:temurin-8-lein-2.10.0-jammy
    <<: *defaults
  openjdk11:
    docker:
      - image: clojure:temurin-11-lein-2.10.0-jammy
    <<: *defaults
  openjdk17:
    docker:
      - image: clojure:temurin-17-lein-2.10.0-jammy
    <<: *defaults
  openjdk21:
    docker:
      - image: clojure:temurin-21-lein-2.10.0-jammy
    <<: *defaults

# Runs a given set of steps, with some standard pre- and post-
# steps, including restoring of cache, saving of cache.
#
# Adapted from https://github.com/lambdaisland/meta/blob/master/circleci/clojure_orb.yml

commands:
  with_cache:
    description: |
      Run a set of steps with Maven dependencies and Clojure classpath cache
      files cached.
      This command restores ~/.m2 and .cpcache if they were previously cached,
      then runs the provided steps, and finally saves the cache.
      The cache-key is generated based on the contents of `deps.edn` present in
      the `working_directory`.
    parameters:
      steps:
        type: steps
      files:
        description: Files to consider when creating the cache key
        type: string
        default: "deps.edn project.clj build.boot"
      cache_version:
        type: string
        description: "Change this value to force a cache update"
        default: "1"
    steps:
      - run:
          name: Install babashka latest
          command: |
            bash <(curl -s https://raw.githubusercontent.com/borkdude/babashka/master/install) --dir ~
            mv ~/bb /usr/local/bin/bb

      - run:
          name: Generate Cache Checksum
          command: |
            for file in << parameters.files >>
            do
              find . -name $file -exec cat {} +
            done | sha256sum | awk '{print $1}' > /tmp/clojure_cache_seed
      - restore_cache:
          key: clojure-<< parameters.cache_version >>-{{ checksum "/tmp/clojure_cache_seed" }}
      - steps: << parameters.steps >>
      - save_cache:
          paths:
            - ~/.m2
            - .cpcache
            - repo
          key: clojure-<< parameters.cache_version >>-{{ checksum "/tmp/clojure_cache_seed" }}

  setup-windows:
    steps:
      - checkout
      - run:
          name: Install scoop latest
          command: |
            iwr get.scoop.sh -outfile 'install.ps1'                                          ; if(-not $?){exit 9}
            .\install.ps1 -RunAsAdmin                                                        ; if(-not $?){exit 9}
            scoop bucket add scoop-clojure https://github.com/littleli/scoop-clojure         ; if(-not $?){exit 9}
            scoop bucket add extras                                                          ; if(-not $?){exit 9}
            New-Item -Path $PROFILE -ItemType "file" -Force                                  ; if(-not $?){exit 9}
            add-content $PROFILE $("`$env:PATH=""$(Resolve-Path ~\scoop\shims);`$env:PATH"""); if(-not $?){exit 9}
            Write-host $env:PATH                                                             ; if(-not $?){exit 9}

      - run:
          name: Install babashka latest
          command:
            scoop install babashka

      - run:
          name: Install lein latest
          command:
            scoop install leiningen

######################################################################
#
# End general purpose configs
#
######################################################################

# The jobs are relatively simple. One runs utility commands against
# latest stable JDK + Clojure, the other against specified versions

jobs:

  util_job:
    description: |
      Running utility commands/checks (linter etc.)
      Always uses Java21 and Clojure 1.11
    parameters:
      steps:
        type: steps
    executor: openjdk21
    environment:
      VERSION: "1.11"
    steps:
      - checkout
      - with_cache:
          cache_version: "1.11"
          steps: << parameters.steps >>


  test_code:
    description: |
      Run tests against given version of JDK and Clojure
    parameters:
      jdk_version:
        description: Version of JDK to test against
        type: string
      clojure_version:
        description: Version of Clojure to test against
        type: string
    executor: << parameters.jdk_version >>
    environment:
      VERSION: << parameters.clojure_version >>
    steps:
      - checkout
      - with_cache:
          cache_version: << parameters.clojure_version >>
          steps:
            - run:
                name: Running tests
                command: bb test
            - store_test_results:
                path: test-results

  test_code_win_java_system:
    description: |
      Run tests on MS-Windows using the system's JDK version and given
      CLOJURE_VERSION.
    executor: win/default
    parameters:
      clojure_version:
        description: Version of Clojure to test against
        type: string
    steps:
      - setup-windows
      - run:
          name: run tests
          command: |
            java -version; if(-not $?){exit 9}
            bb test      ; if(-not $?){exit 9}

# The ci-test-matrix does the following:
#
# - Linux
#   - run tests against the target matrix
#     - Java 8, 11, 17, and 21
#     - Clojure 1.7, 1.8, 1.9, 1.10, 1.11 master
#   - linter, eastwood and cljfmt
#   - verifies cljdoc config
#   - runs code coverage report
# - MS-Windows
#   - run tests against installed java version and Clojure 1.11

workflows:
  version: 2.1
  ci-test-matrix:
    jobs:
      - test_code:
          name: Lnx, Java 8, Clj 1.7
          clojure_version: "1.7"
          jdk_version: openjdk8
      - test_code:
          name: Lnx, Java 8, Clj 1.8
          clojure_version: "1.8"
          jdk_version: openjdk8
      - test_code:
          name: Lnx, Java 8, Clj 1.9
          clojure_version: "1.9"
          jdk_version: openjdk8
      - test_code:
          name: Lnx, Java 8, Clj 1.10
          clojure_version: "1.10"
          jdk_version: openjdk8
      - test_code:
          name: Lnx, Java 8, Clj 1.11
          clojure_version: "1.11"
          jdk_version: openjdk8
      - test_code:
          name: Lnx, Java 8, Clj master
          clojure_version: "master"
          jdk_version: openjdk8
      - test_code:
          name: Lnx, Java 11, Clj 1.7
          clojure_version: "1.7"
          jdk_version: openjdk11
      - test_code:
          name: Lnx, Java 11, Clj 1.8
          clojure_version: "1.8"
          jdk_version: openjdk11
      - test_code:
          name: Lnx, Java 11, Clj 1.9
          clojure_version: "1.9"
          jdk_version: openjdk11
      - test_code:
          name: Lnx, Java 11, Clj 1.10
          clojure_version: "1.10"
          jdk_version: openjdk11
      - test_code:
          name: Lnx, Java 11, Clj 1.11
          clojure_version: "1.11"
          jdk_version: openjdk11
      - test_code:
          name: Lnx, Java 11, Clj master
          clojure_version: "master"
          jdk_version: openjdk11
      - test_code:
          name: Lnx, Java 17, Clj 1.7
          clojure_version: "1.7"
          jdk_version: openjdk17
      - test_code:
          name: Lnx, Java 17, Clj 1.8
          clojure_version: "1.8"
          jdk_version: openjdk17
      - test_code:
          name: Lnx, Java 17, Clj 1.9
          clojure_version: "1.9"
          jdk_version: openjdk17
      - test_code:
          name: Lnx, Java 17, Clj 1.10
          clojure_version: "1.10"
          jdk_version: openjdk17
      - test_code:
          name: Lnx, Java 17, Clj 1.11
          clojure_version: "1.11"
          jdk_version: openjdk17
      - test_code:
          name: Lnx, Java 17, Clj master
          clojure_version: "master"
          jdk_version: openjdk17
      - test_code:
          name: Lnx, Java 21, Clj 1.7
          clojure_version: "1.7"
          jdk_version: openjdk21
      - test_code:
          name: Lnx, Java 21, Clj 1.8
          clojure_version: "1.8"
          jdk_version: openjdk21
      - test_code:
          name: Lnx, Java 21, Clj 1.9
          clojure_version: "1.9"
          jdk_version: openjdk21
      - test_code:
          name: Lnx, Java 21, Clj 1.10
          clojure_version: "1.10"
          jdk_version: openjdk21
      - test_code:
          name: Lnx, Java 21, Clj 1.11
          clojure_version: "1.11"
          jdk_version: openjdk21
      - test_code:
          name: Lnx, Java 21, Clj master
          clojure_version: "master"
          jdk_version: openjdk21
      # - test_code_win_java_system:
      #     name: Win, Java sys, Clj 1.11
      #     clojure_version: "1.11"
      - util_job:
          name: Code Linting
          steps:
            - run:
                name: Running Eastwood
                command: |
                  bb eastwood
            - run:
                name: Running cljfmt
                command: |
                  bb cljfmt
            - run:
                name: Running clj-kondo
                command: |
                  bb kondo
      - util_job:
          name: Checking Cljdoc
          steps:
            - run:
                name: Verifying Cljdoc
                command: |
                  bb verify_cljdoc
